version: "3.9"
services:
  postgresql:
    image: postgres:14-alpine
    restart: always
    ports: ["5432:5432"]
    environment:
      POSTGRES_DB: sonar
      POSTGRES_USER: root
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-password}"
    volumes:
      - "dataVolume:/var/lib/postgresql/data:rw"
    networks:
      - "shared"

  prometheus:
    image: prom/prometheus:v2.45.0
    restart: always
    ports: ["9090:9090"]
    volumes:
      - "./config/development/prometheus:/etc/prometheus:ro"
      - "tsdbVolume:/prometheus:rw"
    command:
      - "--web.enable-remote-write-receiver"
      - "--storage.tsdb.retention.time=10d"
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    networks:
      - "shared"

  alertmanager:
    image: prom/alertmanager:v0.25.0
    restart: always
    ports: [ "9093:9093" ]
    volumes:
      - "./config/development/alertmanager:/etc/alertmanager:ro"
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
    networks:
      - "shared"

  mailserver:
    image: axllent/mailpit:v1.10.2
    restart: unless-stopped
    ports: [ "1025:1025", "8025:8025" ]
    environment:
      MP_MAX_MESSAGES: 100
      MP_SMTP_AUTH_ACCEPT_ANY: 1
      MP_SMTP_AUTH_ALLOW_INSECURE: 1
    networks:
      - "shared"

  loki:
    image: grafana/loki:2.6.1
    restart: always
    ports: [ "3100:3100" ]
    volumes:
      - "./config/development/loki.yml:/etc/loki/local-config.yaml:ro"
      - "lokiVolume:/loki:rw"
    networks:
      - "shared"

  grafana:
    image: grafana/grafana
    restart: unless-stopped
    ports: [ "3000:3000" ]
    networks:
      - "shared"

  test-metric-app:
    build: ./test/test-metric-app
    restart: unless-stopped
    ports: ["2020:2020"]
    environment:
      ENVIRONMENT: "DockerCompose"
    networks:
      - "shared"

  http-metric-test-app:
    build: ./test/http-metric-test-app
    restart: unless-stopped
    ports: ["8082:8082"]
    networks:
      - "shared"

  sonar-agent:
    build:
      context: ./
      dockerfile: Dockerfile.agent
    depends_on:
      - "sonar-api"
    command: ["-f", "/sonar/config/service-config.json"]
    restart: unless-stopped
    ports: ["1234:2020"]
    environment:
      ENVIRONMENT: "DockerCompose"
    volumes:
      - "./sonar-agent/service-config.docker-compose.json:/sonar/config/service-config.json:ro"
    networks:
      - "shared"

  sonar-api:
    build:
      context: ./
      dockerfile: Dockerfile.api
    restart: unless-stopped
    ports: ["8081:8081"]
    environment:
      ASPNETCORE_ENVIRONMENT: "DockerCompose"
    volumes:
      - "./sonar-api/appsettings.DockerCompose.json:/sonar/sonar-api/appsettings.DockerCompose.json:ro"
    networks:
      - "shared"

  sonar-ui:
    build:
      context: ./
      dockerfile: Dockerfile.ui
    depends_on:
      - "sonar-api"
    restart: unless-stopped
    ports: ["8080:8080"]
    environment:
      ENVIRONMENT: "DockerCompose"
    networks:
      - "shared"

volumes:
  dataVolume: {}
  tsdbVolume: {}
  lokiVolume: {}

networks:
  shared:
